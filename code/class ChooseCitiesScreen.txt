class ChooseCitiesScreen extends StatefulWidget {
  const ChooseCitiesScreen({super.key});

  @override
  State<StatefulWidget> createState() => ChooseCitiesScreenState();
}

class ChooseCitiesScreenState extends State<ChooseCitiesScreen> {
  late Future<List<String>> citiesList;
  int selectedIndex = -1;
  String? citySelected;

  Future<List<String>> getAllCitiesList() async {
    try {
      List<City> cities = await getAllCities();
      return cities.map((city) => city.name).toList();
    } catch (error) {
      throw Exception('Failed to load cities: $error');
    }
  }

  void onCitySelected(int index, String city) {
    setState(() {
      selectedIndex = index;
      citySelected = city;
    });
  }

  void onProceedPressed() {
    if (selectedIndex == -1 || citySelected == null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(CustomSnackbar.buildSnackBar(AppStrings.pleaseSelectCity));
    } else {
      // ✅ استخدام mounted بدل context.mounted
      if (mounted) {
        setState(() {
          selectedIndex = -1;
        });
      }

      Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) =>
              CityWeatherInformationScreen(cityName: citySelected!),
        ),
      );
    }
  }

  @override
  void initState() {
    super.initState();
    citiesList = getAllCitiesList();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      floatingActionButton: FloatingActionButton(
        onPressed: onProceedPressed, // ✅ استخدام الدالة الموحدة
        shape: const CircleBorder(),
        backgroundColor: AppColors.floatingActionButtonBackgroundColor,
        child: const Icon(Icons.location_on, color: Colors.white),
      ),
      appBar: AppBar(
        backgroundColor: AppColors.appBarColor,
        title: Text(
          AppStrings.selectCities,
          style: const TextStyle(
            color: Colors.white,
            fontSize: 25,
            fontWeight: FontWeight.w600,
          ),
        ),
        centerTitle: true,
      ),
      body: FutureBuilder<List<String>>(
        future: citiesList,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(
              child: Image.asset(ImagePaths.loading, height: 200, width: 200),
            );
          } else if (snapshot.hasError) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Icon(Icons.error_outline, size: 50, color: Colors.red),
                  const SizedBox(height: 16),
                  Text(
                    "Error: ${snapshot.error}",
                    style: const TextStyle(color: Colors.black, fontSize: 18),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            );
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return Center(
              child: Text(
                AppStrings.citiesNotFound,
                style: const TextStyle(
                  color: Colors.black,
                  fontSize: 24,
                  fontWeight: FontWeight.w600,
                ),
              ),
            );
          } else {
            final List<String> cityList = snapshot.data!;
            return ListView.builder(
              shrinkWrap: true,
              physics: const BouncingScrollPhysics(),
              itemCount: cityList.length,
              itemBuilder: (context, index) =>
                  buildCityItem(cityList[index], index),
            );
          }
        },
      ),
    );
  }

  Widget buildCityItem(String city, int index) {
    final bool isSelected = selectedIndex == index;

    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: InkWell(
        splashColor: Colors.transparent,
        onTap: () => onCitySelected(index, city),
        child: SizedBox(
          height: 80,
          child: Card(
            color: Colors.white,
            shadowColor: Colors.grey,
            elevation: 1,
            child: Padding(
              padding: const EdgeInsets.only(right: 5),
              child: Row(
                children: [
                  const SizedBox(width: 20),
                  Image.asset(
                    height: 30,
                    width: 30,
                    isSelected ? ImagePaths.checked : ImagePaths.unchecked,
                  ),
                  const SizedBox(width: 10),
                  Expanded(
                    child: Text(
                      city,
                      style: TextStyle(
                        fontSize: 19,
                        color: isSelected
                            ? AppColors.floatingActionButtonBackgroundColor
                            : Colors.black,
                        fontWeight: FontWeight.w700,
                      ),
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
